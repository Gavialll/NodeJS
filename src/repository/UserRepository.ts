import {User} from "../entity/User";

class UserRepository {

    /** üìã Get all users */
    async getUsers(): Promise<User[]> {
        return User.query()
    }

    /** üîç Get user by ID */
    async getUserById(id: string): Promise<User | unknown> {
        return await User.query().findById(id).withGraphFetched('[wallet]')
    }

    /** üîç Search user */
    async searchUser(name: string): Promise<User[]> {
        return await User.query()
            .where('name', 'ILIKE', `%${name}%`) // üîç –ü–æ—à—É–∫ –ø–æ —ñ–º–µ–Ω—ñ, –Ω–µ—á—É—Ç–ª–∏–≤–∏–π –¥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
            .withGraphFetched('[wallet]'); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ

    }

    /** üîÑ Update user */
    async updateUser(user: User): Promise<User> {
        return User.query().upsertGraph(user, {
            relate: true,  // –Ø–∫—â–æ –∑–≤‚Äô—è–∑–æ–∫ —ñ—Å–Ω—É—î, –æ–Ω–æ–≤–ª—é—î–º–æ, –∞ –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
            noDelete: true // –ó–∞–±–æ—Ä–æ–Ω—è—î –≤–∏–¥–∞–ª–µ–Ω–Ω—è —ñ—Å–Ω—É—é—á–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
        })
    }

    /** üíæ Save user */
    async saveUser(user: User): Promise<User> {
        return await User.query().insertGraph(user.toJSON())
            .returning('*');
    }

    /** üóëÔ∏è Delete user by ID */
    async deleteUserById(id: string): Promise<boolean> {
        return await User.query().deleteById(id) > 0;
    }
}

export const userRepository = new UserRepository();
