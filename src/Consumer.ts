import amqp from 'amqplib';

// –ó–±–µ—Ä—ñ–≥–∞—î ID –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
const processedMessages = new Set<string>();
// –ó–±–µ—Ä—ñ–≥–∞—î –æ–±—Ä–æ–±–ª–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
export const messages:string[] = [];

export async function consumeMessages(): Promise<void> {
    try {
        const connection = await amqp.connect('amqp://rabbitmq');
        const channel = await connection.createChannel();
        const queue = 'deal_queue';

        await channel.assertQueue(queue, { durable: true });
        console.log('üîî –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å...');

        channel.consume(queue, (message) => {
            if (message !== null) {
                const receivedMessage = JSON.parse(message.content.toString());

                // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ idempotency
                if (processedMessages.has(receivedMessage.id)) {
                    console.log('‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ:', receivedMessage.id);
                    channel.ack(message);
                    return;
                }

                // –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                console.log('üì• –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', receivedMessage);

                // –î–æ–¥–∞—Ç–∏ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ —Å–ø–∏—Å–∫—É –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö
                processedMessages.add(receivedMessage.id);
                messages.push(receivedMessage.text);

                // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–±—Ä–æ–±–∫–∏
                channel.ack(message);
            }
        });
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å:', error);
    }
}